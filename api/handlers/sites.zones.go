package handlers

import (
	"fmt"
	"net/http"
	"sync"
	"time"

	"base/db"
	"base/models"
	"base/responses"
)

//||------------------------------------------------------------------------------------------------||
//|| Cache Globals
//||------------------------------------------------------------------------------------------------||

var (
	SiteZoneCacheMutex  sync.Mutex
	SiteCachedZones     []models.Zone
	SiteZoneCacheExpiry time.Time
)

//||------------------------------------------------------------------------------------------------||
//|| Cache for 5 minutes
//||------------------------------------------------------------------------------------------------||

const SiteZoneCacheTTL = 5 * time.Minute

//||------------------------------------------------------------------------------------------------||
//|| Fetch from Database
//||------------------------------------------------------------------------------------------------||

func fetchZonesBaseFromDB() ([]models.Zone, error) {
	var zones []models.Zone
	//||------------------------------------------------------------------------------------------------||
	//|| Handle Database Query
	//||------------------------------------------------------------------------------------------------||
	result := db.DB.Where("id_zone <> ?", 9999).Find(&zones)
	if result.Error != nil {
		fmt.Println(result)
		return nil, fmt.Errorf("failed to fetch zones from database: %w", result.Error)
	}
	return zones, nil
}

//||------------------------------------------------------------------------------------------------||
//|| Return Zones
//||------------------------------------------------------------------------------------------------||

func SitesZoneHandler(w http.ResponseWriter, r *http.Request) {

	//||------------------------------------------------------------------------------------------------||
	//|| Handle Cache
	//||------------------------------------------------------------------------------------------------||

	SiteZoneCacheMutex.Lock()
	defer SiteZoneCacheMutex.Unlock()

	//||------------------------------------------------------------------------------------------------||
	//|| Return Cache
	//||------------------------------------------------------------------------------------------------||

	if time.Now().Before(zoneCacheExpiry) && cachedZones != nil {
		responses.Success(w, http.StatusOK, cachedZones)
		return
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Fetch Zones from Database
	//||------------------------------------------------------------------------------------------------||

	dbZones, err := fetchZonesBaseFromDB()
	if err != nil {
		responses.Error(w, http.StatusInternalServerError, "Failed to fetch zones")
		return
	}

	//||------------------------------------------------------------------------------------------------||
	//|| Populate Cache
	//||------------------------------------------------------------------------------------------------||

	SiteCachedZones = dbZones
	SiteZoneCacheExpiry = time.Now().Add(SiteZoneCacheTTL)

	//||------------------------------------------------------------------------------------------------||
	//|| REturn the Live Zones
	//||------------------------------------------------------------------------------------------------||

	responses.Success(w, http.StatusOK, dbZones)
}
